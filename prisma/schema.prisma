generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  tenantId      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tenant        Tenant?   @relation("TenantMember", fields: [tenantId], references: [id])
  ownedTenants  Tenant[]  @relation("TenantOwner")
  orders        Order[]
  cartItems     CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tenant {
  id           String   @id @default(cuid())
  name         String
  subdomain    String   @unique
  customDomain String?  @unique
  description  String?
  logo         String?
  ownerId      String   @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner      User        @relation("TenantOwner", fields: [ownerId], references: [id])
  members    User[]      @relation("TenantMember")
  products   Product[]
  categories Category[]
  orders     Order[]
  settings   TenantSettings?

  @@index([subdomain])
  @@index([customDomain])
}

model TenantSettings {
  id            String  @id @default(cuid())
  tenantId      String  @unique
  primaryColor  String  @default("#000000")
  accentColor   String  @default("#ffffff")
  currency      String  @default("USD")
  timezone      String  @default("UTC")
  allowGuest    Boolean @default(true)
  requireEmail  Boolean @default(true)

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  image       String?
  tenantId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([slug, tenantId])
  @@index([tenantId])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  images      String[]
  inventory   Int      @default(0)
  sku         String?
  categoryId  String?
  tenantId    String
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@unique([slug, tenantId])
  @@index([tenantId])
  @@index([categoryId])
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String?
  tenantId      String
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2) @default(0)
  shipping      Decimal     @db.Decimal(10, 2) @default(0)
  customerEmail String
  customerName  String
  shippingAddress Json?
  billingAddress  Json?
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user       User?       @relation(fields: [userId], references: [id])
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@index([tenantId])
  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}